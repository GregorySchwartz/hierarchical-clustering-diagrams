{-# LANGUAGE BangPatterns, FlexibleContexts #-}

module Diagrams.Dendrogram
    ( dendrogram
    , dendrogramPath
    , fixedWidth
    , variableWidth
    , X
    ) where

-- from base
import Control.Arrow (first, second)

-- from hierarachical-clustering
import Data.Clustering.Hierarchical (Dendrogram(..))

-- from diagrams-lib
import Diagrams.Prelude


-- | @dendrogram drawItem dendro@ is a drawing of the dendrogram
-- @dendro@ using @drawItem@ to draw its leafs.
dendrogram :: (Monoid m, Renderable (Path R2) b) =>
              (a -> AnnDiagram b R2 m)
              -> Dendrogram a
              -> AnnDiagram b R2 m
dendrogram drawItem dendro = (stroke path_ # value mempty)
                                         ===
                                   (items # alignL)
  where
    (path_, items) = first dendrogramPath $ variableWidth drawItem dendro


-- | A dendrogram path that can be 'stoke'd later.  This function
-- assumes that the 'Leaf'@s@ of your 'Dendrogram' are already in
-- the right position.
dendrogramPath :: Dendrogram X -> Path R2
dendrogramPath = mconcat . fst . go []
    where
      go acc (Leaf x)       = (acc, (x, 0))
      go acc (Branch d l r) = (path : acc'', pos)
        where
          (acc',  (!xL, !yL)) = go acc  l
          (acc'', (!xR, !yR)) = go acc' r

          path = fromVertices [ P (xL, yL)
                              , P (xL, d)
                              , P (xR, d)
                              , P (xR, yR)]
          pos  = ((xL + xR) / 2, d)


-- | The horizontal position of a dendrogram Leaf.
type X = Double


-- | @fixedWidth w@ positions the 'Leaf'@s@ of a 'Dendrogram'
-- assuming that they have the same width @w@.  Also returns the
-- total width.
fixedWidth :: Width -> Dendrogram a -> (Dendrogram X, Width)
fixedWidth w = second (subtract half_w) . go half_w
    where
      half_w = w/2
      go !y (Leaf _)       = (Leaf y, y + w)
      go !y (Branch d l r) = (Branch d l' r', y'')
          where
            (l', !y')  = go y  l
            (r', !y'') = go y' r


-- | @variableWidth draw@ positions the 'Leaf'@s@ of a
-- 'Dendrogram' according to the diagram generated by 'draw'.
-- Each 'Leaf' may have a different width.  Also returns the
-- resulting diagram having all 'Leaf'@s@ drawn side-by-side.
--
-- Note: you should probably use 'alignT' to align your items.
variableWidth :: (Monoid m) =>
                 (a -> AnnDiagram b R2 m)
              -> Dendrogram a
              -> (Dendrogram X, AnnDiagram b R2 m)
variableWidth draw = finish . go 0
    where
      go !y (Leaf a) = (Leaf y', y'', dia)
          where
            dia  = draw a
            !w   = width dia
            !y'  = y + w/2
            !y'' = y + w
      go !y (Branch d l r) = (Branch d l' r', y'', diaL ||| diaR)
          where
            (l', !y',  diaL) = go y  l
            (r', !y'', diaR) = go y' r
      finish (dendro, _, dia) = (dendro, dia)


-- | The width of something.
type Width = Double